/*
 * Copyright (c) 2013 ICM Uniwersytet Warszawski All rights reserved.
 * See LICENCE.txt file for licensing information.
 */
package pl.edu.icm.unity.webadmin.tprofile.wizard;

import java.util.Collection;

import pl.edu.icm.unity.server.authn.remote.RemoteAttribute;
import pl.edu.icm.unity.server.authn.remote.RemoteGroupMembership;
import pl.edu.icm.unity.server.authn.remote.RemoteIdentity;
import pl.edu.icm.unity.server.authn.remote.RemotelyAuthenticatedInput;
import pl.edu.icm.unity.server.utils.UnityMessageSource;
import pl.edu.icm.unity.webadmin.tprofile.TranslationProfileEditor;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.Table.TableDragMode;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

/**
 * UI Component used by {@link ProfileStep}.
 * 
 * @author Roman Krysinski
 */
public class ProfileStepComponent extends CustomComponent 
{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel splitPanelLayout;
	@AutoGenerated
	private VerticalLayout leftPanel;
	@AutoGenerated
	private Accordion inputParameters;
	@AutoGenerated
	private Table groups;
	@AutoGenerated
	private Table attributes;
	@AutoGenerated
	private Table identities;
	@AutoGenerated
	private Label dragdropHint;
	@AutoGenerated
	private VerticalLayout rightPanel;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param editor 
	 * @param msg 
	 */
	public ProfileStepComponent(UnityMessageSource msg, TranslationProfileEditor editor) 
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);

		dragdropHint.setValue(msg.getMessage("Wizard.ProfileStepComponent.dragdropHint"));
		leftPanel.setExpandRatio(inputParameters, 1);
		
		setEditor(editor);
		
		inputParameters.getTab(identities).setCaption(msg.getMessage("Wizard.ProfileStepComponent.identities"));
		inputParameters.getTab(attributes).setCaption(msg.getMessage("Wizard.ProfileStepComponent.attributes"));
		inputParameters.getTab(groups).setCaption(msg.getMessage("Wizard.ProfileStepComponent.groups"));
		
		splitPanelLayout.setSizeFull();
		splitPanelLayout.setSplitPosition(inputParameters.getWidth(), inputParameters.getWidthUnits(), true);
		splitPanelLayout.addStyleName(Reindeer.SPLITPANEL_SMALL);
		
		splitPanelLayout.setLocked(true);
	}
	
	public void setEditor(TranslationProfileEditor editor)
	{
		rightPanel.removeAllComponents();
		rightPanel.addComponent(editor);
	}

	public void handle(RemotelyAuthenticatedInput authnInput) 
	{
		initializeTables(authnInput);
	}

	private void initializeTables(RemotelyAuthenticatedInput input) 
	{
		initTable(identities, 
				input.getIdentities().values(),
				new Object[]{"name"},
				RemoteIdentity.class);
		
		initTable(attributes, 
				input.getAttributes().values(),
				new Object[]{"name", "values"},
				RemoteAttribute.class);
		
		initTable(groups, 
				input.getGroups().values(),
				new Object[]{"name"},
				RemoteGroupMembership.class);
	}
	
	private <T> void initTable(Table table, Collection<T> items, Object[] visibleCollumns, Class<T> clazz)
	{
		table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		table.setDragMode(TableDragMode.ROW);
		table.setSelectable(true);
		table.setItemDescriptionGenerator(new Table.ItemDescriptionGenerator() 
		{
			@Override
			public String generateDescription(Component source, Object itemId, Object propertyId) 
			{
	            return itemId.toString();
			}
		});
		BeanItemContainer<T> idBeans = new BeanItemContainer<T>(clazz);
		idBeans.addAll(items);
		table.setContainerDataSource(idBeans);
		table.setVisibleColumns(visibleCollumns);
		table.setPageLength(table.size());
		table.refreshRowCache();
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// splitPanelLayout
		splitPanelLayout = buildSplitPanelLayout();
		mainLayout.addComponent(splitPanelLayout);
		mainLayout.setExpandRatio(splitPanelLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildSplitPanelLayout() {
		// common part: create layout
		splitPanelLayout = new HorizontalSplitPanel();
		splitPanelLayout.setImmediate(false);
		splitPanelLayout.setWidth("100.0%");
		splitPanelLayout.setHeight("100.0%");
		
		// rightPanel
		rightPanel = new VerticalLayout();
		rightPanel.setImmediate(false);
		rightPanel.setWidth("100.0%");
		rightPanel.setHeight("100.0%");
		rightPanel.setMargin(false);
		splitPanelLayout.addComponent(rightPanel);
		
		// leftPanel
		leftPanel = buildLeftPanel();
		splitPanelLayout.addComponent(leftPanel);
		
		return splitPanelLayout;
	}

	@AutoGenerated
	private VerticalLayout buildLeftPanel() {
		// common part: create layout
		leftPanel = new VerticalLayout();
		leftPanel.setImmediate(false);
		leftPanel.setWidth("300px");
		leftPanel.setHeight("100.0%");
		leftPanel.setMargin(false);
		
		// dragdropInfo
		dragdropHint = new Label();
		dragdropHint.setImmediate(false);
		dragdropHint.setWidth("300px");
		dragdropHint.setHeight("-1px");
		dragdropHint.setValue("Label");
		dragdropHint.setContentMode(ContentMode.HTML);
		leftPanel.addComponent(dragdropHint);
		
		// inputParameters
		inputParameters = buildInputParameters();
		leftPanel.addComponent(inputParameters);
		
		return leftPanel;
	}

	@AutoGenerated
	private Accordion buildInputParameters() {
		// common part: create layout
		inputParameters = new Accordion();
		inputParameters.setImmediate(true);
		inputParameters.setWidth("300px");
		inputParameters.setHeight("100.0%");
		
		// identities
		identities = new Table();
		identities.setImmediate(false);
		identities.setWidth("100.0%");
		identities.setHeight("-1px");
		inputParameters.addTab(identities, "Identities", null);
		
		// attributes
		attributes = new Table();
		attributes.setImmediate(false);
		attributes.setWidth("100.0%");
		attributes.setHeight("-1px");
		inputParameters.addTab(attributes, "Attributes", null);
		
		// groups
		groups = new Table();
		groups.setImmediate(false);
		groups.setWidth("100.0%");
		groups.setHeight("-1px");
		inputParameters.addTab(groups, "Groups", null);
		
		return inputParameters;
	}
}

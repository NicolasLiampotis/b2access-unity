/*
 * Copyright (c) 2013 ICM Uniwersytet Warszawski All rights reserved.
 * See LICENCE.txt file for licensing information.
 */
package pl.edu.icm.unity.webadmin.tprofile.wizard;

import pl.edu.icm.unity.sandbox.SandboxUI;
import pl.edu.icm.unity.server.authn.AuthenticationResult;
import pl.edu.icm.unity.server.authn.AuthenticationResult.Status;
import pl.edu.icm.unity.server.utils.UnityMessageSource;
import pl.edu.icm.unity.webui.common.Styles;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.server.ExternalResource;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;

/**
 * UI Component used by {@link DryRunStep}.
 * 
 * @author Roman Krysinski
 */
public class DryRunStepComponent extends CustomComponent 
{

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private Label authnResultLabel;
	@AutoGenerated
	private Button popupButton;
	@AutoGenerated
	private Label infoLabel;
	private UnityMessageSource msg;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 * @param msg 
	 * @param sandboxURL 
	 */
	public DryRunStepComponent(UnityMessageSource msg, String sandboxURL) 
	{
		buildMainLayout();
		setCompositionRoot(mainLayout);

		this.msg = msg;
		
		infoLabel.setValue(msg.getMessage("Wizard.DryRunStepComponent.infoLabel"));
		popupButton.setCaption(msg.getMessage("Wizard.DryRunStepComponent.popupButton"));
		SandboxPopup popup = new SandboxPopup(
				new ExternalResource(sandboxURL + "?" + SandboxUI.PROFILE_VALIDATION + "=true"));
		authnResultLabel.setValue("");
		popup.attachButton(popupButton);		
		
	}

	public void handle(AuthenticationResult authnResult) 
	{
		if (authnResult.getStatus() == Status.success)
		{
			authnResultLabel.setValue(msg.getMessage("Wizard.DryRunStepComponent.authnResultLabel.success"));
			authnResultLabel.setStyleName(Styles.success.toString());
		} else
		{
			authnResultLabel.setValue(msg.getMessage("Wizard.DryRunStepComponent.authnResultLabel.error"));
			authnResultLabel.setStyleName(Styles.error.toString());
		}
	}

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("-1px");
		
		// infoLabel
		infoLabel = new Label();
		infoLabel.setImmediate(false);
		infoLabel.setWidth("-1px");
		infoLabel.setHeight("-1px");
		infoLabel.setValue("Label");
		mainLayout.addComponent(infoLabel);
		
		// popupButton
		popupButton = new Button();
		popupButton.setCaption("Button");
		popupButton.setImmediate(false);
		popupButton.setWidth("-1px");
		popupButton.setHeight("-1px");
		mainLayout.addComponent(popupButton);
		
		// authnResultLabel
		authnResultLabel = new Label();
		authnResultLabel.setImmediate(false);
		authnResultLabel.setWidth("-1px");
		authnResultLabel.setHeight("-1px");
		authnResultLabel.setValue("Label");
		mainLayout.addComponent(authnResultLabel);
		
		return mainLayout;
	}

}

package pl.edu.icm.unity.webadmin.tprofile.incubator;

import java.util.Collection;

import pl.edu.icm.unity.server.authn.remote.RemoteAttribute;
import pl.edu.icm.unity.server.authn.remote.RemoteGroupMembership;
import pl.edu.icm.unity.server.authn.remote.RemoteIdentity;
import pl.edu.icm.unity.server.authn.remote.RemoteInformationBase;
import pl.edu.icm.unity.server.authn.remote.RemotelyAuthenticatedInput;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.util.BeanItem;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.event.DataBoundTransferable;
import com.vaadin.event.dd.DragAndDropEvent;
import com.vaadin.event.dd.DropHandler;
import com.vaadin.event.dd.acceptcriteria.AcceptAll;
import com.vaadin.event.dd.acceptcriteria.AcceptCriterion;
import com.vaadin.ui.Accordion;
import com.vaadin.ui.Component;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DragAndDropWrapper;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Table.ColumnHeaderMode;
import com.vaadin.ui.Table.TableDragMode;
import com.vaadin.ui.TextField;
import com.vaadin.ui.VerticalLayout;

public class StickyComponent extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private HorizontalLayout mainLayout;
	@AutoGenerated
	private HorizontalSplitPanel splitPanelLayout;
	@AutoGenerated
	private Accordion inputParameters;
	@AutoGenerated
	private Table groups;
	@AutoGenerated
	private Table attributes;
	@AutoGenerated
	private Table identities;
	@AutoGenerated
	private VerticalLayout profileContainer;
	@AutoGenerated
	private TextField expresion;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public StickyComponent() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
		splitPanelLayout.setLocked(true);
		
		RemotelyAuthenticatedInput input = new RemotelyAuthenticatedInput("idpName");
		input.addIdentity(new RemoteIdentity("_590f058561c65ba2113c743a3449f3a6", "urn:oasis:names:tc:SAML:2.0:nameid-format:transient"));
		input.addAttribute(new RemoteAttribute("urn:oid:2.5.4.3", "[user1]"));
		input.addAttribute(new RemoteAttribute("urn:oid:2.5.4.4", "[User1 surname]"));
		input.addAttribute(new RemoteAttribute("urn:oid:2.5.4.5", "[address]"));
		input.addGroup(new RemoteGroupMembership("student"));
		input.addGroup(new RemoteGroupMembership("admin"));
		
		initializeTables(input);
		
		profileContainer.removeAllComponents();
		Component c = getWrappedText(expresion);
		profileContainer.addComponent(c);
		profileContainer.setExpandRatio(c, 1);
	}

	private Component getWrappedText(final TextField text)
	{
		DragAndDropWrapper textWrapper = new DragAndDropWrapper(text);
		textWrapper.setDropHandler(new DropHandler() 
		{
			@Override
			public AcceptCriterion getAcceptCriterion() 
			{
				return AcceptAll.get();
			}
			
			@Override
			public void drop(DragAndDropEvent event) 
			{
				DataBoundTransferable t = (DataBoundTransferable) event.getTransferable();
				Object sourceItemId = t.getData("itemId");
				
				String source = "";
				if (sourceItemId instanceof BeanItem<?>)
				{
					Object bean = ((BeanItem<?>) sourceItemId).getBean();
					source = ((RemoteInformationBase) bean).getName();
				} else if (sourceItemId instanceof RemoteInformationBase)
				{
					source = ((RemoteInformationBase) sourceItemId).getName();
				}
				String newValue = text.getValue() + source;
				text.setValue(newValue);
			}
		});
		
		return textWrapper;
	}
	
	private void initializeTables(RemotelyAuthenticatedInput input) 
	{
		initTable(identities, 
				input.getIdentities().values(),
				new Object[]{"name"},
				RemoteIdentity.class);
		
		initTable(attributes, 
				input.getAttributes().values(),
				new Object[]{"name", "values"},
				RemoteAttribute.class);
		
		initTable(groups, 
				input.getGroups().values(),
				new Object[]{"name"},
				RemoteGroupMembership.class);
	}
	
	private <T> void initTable(Table table, Collection<T> items, Object[] visibleCollumns, Class<T> clazz)
	{
		table.setColumnHeaderMode(ColumnHeaderMode.HIDDEN);
		table.setDragMode(TableDragMode.ROW);
		table.setSelectable(true);
		table.setItemDescriptionGenerator(new Table.ItemDescriptionGenerator() 
		{
			@Override
			public String generateDescription(Component source, Object itemId, Object propertyId) 
			{
	            return itemId.toString();
			}
		});
		BeanItemContainer<T> idBeans = new BeanItemContainer<T>(clazz);
		idBeans.addAll(items);
		table.setContainerDataSource(idBeans);
		table.setVisibleColumns(visibleCollumns);
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// splitPanelLayout
		splitPanelLayout = buildSplitPanelLayout();
		mainLayout.addComponent(splitPanelLayout);
		mainLayout.setExpandRatio(splitPanelLayout, 1.0f);
		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalSplitPanel buildSplitPanelLayout() {
		// common part: create layout
		splitPanelLayout = new HorizontalSplitPanel();
		splitPanelLayout.setImmediate(false);
		splitPanelLayout.setWidth("100.0%");
		splitPanelLayout.setHeight("100.0%");
		
		// profileContainer
		profileContainer = buildProfileContainer();
		splitPanelLayout.addComponent(profileContainer);
		
		// inputParameters
		inputParameters = buildInputParameters();
		splitPanelLayout.addComponent(inputParameters);
		
		return splitPanelLayout;
	}

	@AutoGenerated
	private VerticalLayout buildProfileContainer() {
		// common part: create layout
		profileContainer = new VerticalLayout();
		profileContainer.setImmediate(false);
		profileContainer.setWidth("100.0%");
		profileContainer.setHeight("100.0%");
		profileContainer.setMargin(false);
		
		// expresion
		expresion = new TextField();
		expresion.setImmediate(false);
		expresion.setWidth("100.0%");
		expresion.setHeight("-1px");
		profileContainer.addComponent(expresion);
		
		return profileContainer;
	}

	@AutoGenerated
	private Accordion buildInputParameters() {
		// common part: create layout
		inputParameters = new Accordion();
		inputParameters.setImmediate(true);
		inputParameters.setWidth("300px");
		inputParameters.setHeight("-1px");
		
		// identities
		identities = new Table();
		identities.setImmediate(false);
		identities.setWidth("100.0%");
		identities.setHeight("100.0%");
		inputParameters.addTab(identities, "Identities", null);
		
		// attributes
		attributes = new Table();
		attributes.setImmediate(false);
		attributes.setWidth("100.0%");
		attributes.setHeight("100.0%");
		inputParameters.addTab(attributes, "Attributes", null);
		
		// groups
		groups = new Table();
		groups.setImmediate(false);
		groups.setWidth("100.0%");
		groups.setHeight("100.0%");
		inputParameters.addTab(groups, "Groups", null);
		
		return inputParameters;
	}

}

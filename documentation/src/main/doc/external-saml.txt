[[external-saml]]
=== External SAML IdP

External SAML authentication module allows for authenticating the Unity's client with the external
SAML identity provider as Shibboleth IdP or any other SAML 2 compliant service. Attributes of the authenticated
user can be as well obtained and mapped to the local database. 

Currently only the two most popular SAML2 SSO bindings are supported: HTTP Post and HTTP Redirect. 
This means that this authentication can be used only for the web endpoints, to authenticate web browser clients. 

The remote SAML callout is configured with a list of trusted SAML identity providers. If more then one
trusted provider is defined, then a user can select his/her home provider. As each provider features can be different
nearly all settings are specified per provider.  

Let's consider an example with two remote IdPs:

----
unity.saml.requester.requesterEntityId=https://unity.example.com/unitygw/saml-sp-metadata/metadata-main
unity.saml.requester.metadataPath=metadata-main
unity.saml.requester.requesterCredential=MAIN
unity.saml.requester.acceptedNameFormats.1=urn:oasis:names:tc:SAML:2.0:nameid-format:persistent
unity.saml.requester.acceptedNameFormats.2=urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress
unity.saml.requester.acceptedNameFormats.3=urn:oasis:names:tc:SAML:2.0:nameid-format:transient
unity.saml.requester.displayName=Remote SAML authentication

unity.saml.requester.remoteIdp.1.name=Simple SAMLPHP in Rohan
unity.saml.requester.remoteIdp.1.address=https://idp.example2.com:8080/simplesaml/saml2/idp/SSOService.php
unity.saml.requester.remoteIdp.1.binding=HTTP_REDIRECT
unity.saml.requester.remoteIdp.1.samlId=https://idp.example2.com:8080/simplesaml/saml2/idp/metadata.php
unity.saml.requester.remoteIdp.1.certificate=ROHAN_IDP
unity.saml.requester.remoteIdp.1.groupMembershipAttribute=urn:oid:1.3.6.1.4.1.5923.1.1.1.1
unity.saml.requester.remoteIdp.2.requestedNameFormat=urn:oasis:names:tc:SAML:2.0:nameid-format:transient
unity.saml.requester.remoteIdp.1.translationProfile=samlProfile

unity.saml.requester.remoteIdp.2.name=Shibboleth IdP in Gondor
unity.saml.requester.remoteIdp.2.address=https://idp.example2.com/idp/profile/SAML2/Redirect/SSO
unity.saml.requester.remoteIdp.2.binding=HTTP_POST
unity.saml.requester.remoteIdp.2.samlId=https://idp.example2.com/idp/shibboleth
unity.saml.requester.remoteIdp.2.certificate=GONDOR_IDP
unity.saml.requester.remoteIdp.2.translationProfile=samlProfile
----

The first part of the configuration provides the general settings: metadata (see below), credential used to sign
contents, accepted name formats and the displayed name of the authentication option for the user interface.
A configuration of two IdPs follows.

Both IdPs shares the same translation profile (common approach when the IdPs are from a single federation with
agreed attributes profile), however the first IdP is configured to use HTTP Redirect binding, while the later the
HTTP POST. The certificates are mandatory to verify responses, and are the fundamental element of the 
whole authentication to ensure proper trust and therefore security.

The first IdP has also two advanced options set: it is defined which attribute is used as a group attribute and
a requested name format is fixed (in the latter case the IdP is free to choose).

The complete SAML authenticator configuration reference follows:

include::ref-samlSPProperties.txt[]

[[saml-metadata]]
==== SAML Metadata support

Many SAML services rely on the SAML Metadata format to configure trusted SAML agents. This can be done manually 
by creating and distributing such data out of bands, but Unity also allows to:
- Automatically generate the metadata from the internal configuration. 
- Publish the metadata (generated or manually provided) so it can be downloaded.
- Sign the metadata, both the generated or manually provided, before it is published.

Configuration reference provides the Metadata related settings. The metadata of an authenticator is published 
under the path +/unitygw/saml-sp-metadata/NAME+, where +NAME+ is configurable with the 
+unity.saml.requester.requesterCredential+ property and is used to distinguish the metadata of 
different SAML authenticators (as it is possible to configure more then one).

 
== Installation and operation manual

=== Prerequisites

Unity is tested on the Linux platform. Also other variants of Unix should be fine to run Unity.  

Unity theoretically can be run on Windows server, however we neither provide startup scripts for windows nor
test it. If you would love to run Unity on Windows machine, write to the support mailing list. 

Unity is distributed with everything needed to install and run the system except of Java. 
Java Runtime Environment 7 must be installed, both OpenJDK and Oracle distributions are supported.
It is strongly advised to use the latest, updated version of the JRE.

=== Fresh installation

If the +.tar.gz+ version is used, it must be simply downloaded and unpacked. A directory with Unity version
number is included. Typically the start script should be created or integrated with the startup system of the
machine. The distribution's +extra/+ folder may provide a suitable script. 
It is also a good idea to add the +INSTALLATION_DIRECTORY/bin/+ folder to the +PATH+ environment variable,
so the scripts are instantly available. This is assumed later on in all examples.  

If the +.rpm+ version is used it should be installed with the package manager. The only dependency is Java JRE,
which will be installed automatically if not yet available on the machine. The startup scripts are also installed
automatically. 

[NOTE]
In case of RPM installation the standard Linux directory layout is used. This manual uses the names of Unity 
subdirectories as found in the +.tar.gz+ distribution. The mapping of those folders to locations used in the case of 
the RPM installation is as follows:

[options="header"]
|===
|TAR.GZ			| RPM 
|bin/			| /usr/sbin/
|lib/			| /usr/share/unity-idm/lib/
|logs/			| /var/log/unity-idm/
|data/			| /var/lib/unity-idm/data/
|conf/			| /etc/unity-idm/
|===

Unity can be started right away, but most probably the default setting should be changed. 
Please refer to the <<quick_start>> or <<configuration>> sections for a short or detailed information how to 
configure the system.

=== Starting and stopping the server

Starting is simple:

----
$> unity-idm-server-start
----

It is always good to check the log files. The +log/unity-startup.log+ should contain only few lines saying that
the server started successfully. If there are any errors there, it means that a very low level problem happened, 
for instance the JRE is not available. The +log/unity-server.log+ should provide a more detailed information, 
which should be also checked. There should be no +ERROR+ and no +WARN+ entries.

Stopping the server is simple as well:

----
$> unity-idm-server-stop
----

[id=quick_start]
=== Crucial facts to know before the first start

Unity server can be started right after installation. By default the server is configured to listen on the localhost 
(loopback) network interface and uses _absolutely insecure credentials_ for the TLS protocol. Therefore you can 
play around but before going into any real usage some reconfiguration is mandatory.

Here we list the most important facts about the default configuration:

- The server is configured to run on +localhost+ address on the port +2443+. Also the advertised address is localhost.
All of those parameters need an update before going into production.
- The server uses an insecure credential (its private key is well known) issued by an insecure CA, which is the only
one trusted CA. A real credential and truststore should be used for production.
- The server uses an embedded H2 database. Its performance is fine, however it is not recommended in production 
deployments where DB backups and high availability may easily become an requirement.
- The server should be started by an unprivileged user. It is not required in case of using 
the system initialization scripts installed with RPM, which can be run by root 
(the user will be automatically changed to +unity-idm+).


==== The first and subsequent startups

During the startup the server checks if it needs to initialize the various subsystems. This initialization takes place
during the first start after installation and also after the Unity database is deleted.

. If the database is empty the tables are automatically created. There is no need to invoke any database initialization 
scripts. The database is populated with the mandatory system contents.
. If there is no configured admin user in the database, this user is created, using the configured credentials.
The default admin user credential is automatically set to the _outdated_ state, what causes a necessity to change it 
immediately after the first login. 
. Subsequently the data structures defined in configuration files are loaded to the database. 
This functionality is provided to be able to manage of those parts of the 
Unity engine data/configuration which doesn't have management GUI (yet). In general those are low-level, rarely changed
artifacts as endpoints or authenticators.
. Finally the configured content initializers are run. Those initializers are useful to load the default contents
for various use-cases.

The distribution is set up to load demo contents. If you don't need it - remove it from the configuration 
(see below how).




  

[[external-idps]]
== Integration of 3rd party Identity Providers

Unity can use external services to authenticate its own clients. This way Unity can act as an
authentication hub (many authentication options are offered in a single place) and as an 
authentication bridge (Unity client can use different authentication protocol then the 
protocol of the upstream IdP).

_External IdPs are configured as specialized authenticators which outsource credential verification to 
the upstream service. So this section treats about the configuration of external authenticators._

Data from external IdPs is accessed in a protocol specific way. The configuration of this
part is described in the following subsections. After the protocol specific part, a common process 
for all external IdP types take place: translation of the obtained data to the internal Unity 
representation. This "mapping" can handle both semantical and syntactical differences of the 
identity-related information. It is configured with so called _translation profiles_.

=== Translation profiles configuration

Translation profile is a named, ordered list of conditional rules. The rules are used to 
modify the remotely obtained data and/or to perform automatic modifications of the Unity's 
database. For instance translation profile can change remote attribute 'size' name to
'width' and insert a remotely authenticated user to the local database (to the correct group)
if the user is not yet there.

Translation profile is associated with a remote authenticator in authenticator's configuration.  
The definition of profile is done with the Admin UI (Server management->Translation profiles).

Translation profile (both conditions and rules) operate on a data structure which is initially
filled by the protocol specific component. The structure can contain:

. Identity (or identities) authenticated by the remote IdP.
. Attributes provided by the remote IdP.
. Groups assigned by the remote IdP.
 
What data is actually returned is dependent on the protocol, upstream server and callout configuration.

The rule condition is given as a MVEL expression, which must evaluate to a boolean value (true or false).
See <<mvel>> for details and examples.
 
The actions allow for creating Unity's groups, attributes and identities. Each profile should be started
from a mandatory identity mapping. It is possible to control whether the remote identity should be matched 
against the local one automatically created. 

Example:
------
1: Condition: true
Action: mapIdentity
Action parameters:
  unityIdentityType = userName
  expression = attr['urn:oid:2.5.4.3']
  credential requirement = Password requirement
  effect = CREATE_OR_MATCH

2: Condition: true
Action: mapAttribute
Action parameters:
  unityAttribute = cn
  group = /
  expression = attr['urn:oid:2.5.4.4']
  visibility = full
  effect = CREATE_OR_UPDATE

3: Condition: groups contains 'student'
Action: mapGroup
Action parameters:
  expression = /A/B
------

The above profile in the first action maps the attribute +urn:oid:2.5.4.3+ value to Unity identity of +userName+ 
type. Such identity will be created if doesn't exist, otherwise all other actions will be performed against 
the existing local identity with such userName. Subsequently the remote attribute +urn:oid:2.5.4.4+ value 
will be mapped to Unity attribute +cn+ and the attribute will be assigned in the root group if it doesn't exist.
If it does, its value will be updated (upon each login). Finally the user will be added to the '/A/B' group
assuming it is in the +student+ group as reported by the remote IdP.


[id=mvel]
==== MVEL expressions

Conditions and some of the arguments of translation actions have to be specified as _MVEL expressions_. Such expressions
allow for a powerful, dynamic translation functionality.

The full MVEL documentation can be found here 
http://mvel.codehaus.org/Language+Guide+for+2.0 and the quick start is here
http://mvel.codehaus.org/Getting+Started+for+2.0

Below we present the details of the data on which the expression works, but first a couple of helpful examples is 
given. The examples should be enough to write all simple expressions.

===== Examples

The most often used condition:
----
true
----

Condition disabling the action:
----
false
----

Condition testing if a principal is a member of the +students+ group (which is a group at the remote IdP):  
----
groups contains 'students'
----  

Condition testing if a principal has the +cn+ attribute:
----
attr contains 'cn'
----

When writing expressions in actions, usually we need a string value. For instance here is the first value
of the _cn_ attribute:
----
attr['cn']
----

All values (list) of the same attribute:
----
attrs['cn']
----
  
It is also possible to glue many values. Let's create a DN:
----
'CN=' + attr['cn'] + ',O=' + attr['o'] + ',C=NO'
----

Finally the value of the identity provided by remote IdP is available as follows:
----
id
----

===== MVEL context reference

. +idp+ Name of the IdP which provided the data 
. +attr+ Map indexed with attribute names. Value of each entry is a single value of the attribute. If the attribute
is multi-valued then the first value is returned. If the attribute has no value then empty string is returned. 
. +attrs+ Map indexed with attribute names. Value of each entry is a list of the attribute values.
. +id+ Value of the authenticated identity. If remote IdP returned multiple identities, then a random one is available,
though this is a very exotic case. 
. +idType+ The type of the identity stored in the +id+ variable.
. +idsByType+ Map of identity values indexed by type. Rarely useful.
. +groups+ List of all remote groups. 




include::external-ldap.txt[]

include::external-saml.txt[]

include::external-oauth.txt[]

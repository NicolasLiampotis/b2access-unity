[id=configuration]
== General server configuration

The server uses two main configuration files: +conf/unityServer.conf+ and +conf/log4j.properties+. 
There is also a third one, +conf/startup.properties+, which allows for controlling low level Java VM options
(as memory or JVM executable) and for changing the location of the main configuration files mentioned above. 

The +conf/log4j.properties+ file configures the logging of the server. This is described in the section <<logging>>.

The +conf/unityServer.conf+ file is the main server configuration file. All other additional configuration
files are defined in it.

Configuration files are loaded at startup. Most of the files (all except of the logging and mail settings) are
quite strictly verified - in case of misconfiguration, syntax errors, or spelling mistakes server prints a loud
error message in log file and (if the error is critical) does not start.

Configuration updates at runtime are handled as follows:

 * +conf/log4j.properties+ file is automatically reloaded after it is modified (with few seconds latency). 
 It is recorded in the log file.
 * No other file is automatically reloaded after modification. However,
 * configuration of authenticators and endpoints can be reloaded from the Web Admin UI 
 (in the Server Management tab). It is possible to remove, add or reconfigure existing elements.
 * Reconfiguration of the remaining options from the main configuration file and PKI settings 
 requires server restart. Note that most of the features configured in the files can be managed at runtime
 from the Web Admin UI.
 * Note however that the +directory+ and +openssl+ truststores which can be configured in PKI settings 
 allows for automatic updates of their content when trusted certificates or CRLs are added or removed.
 
  
The table showing all the options is quite long, so here we provide a description of the most important parts
of the configuration: 

 * The general server settings (it is always good to review them) include:
 ** The initial admin username and password. After the server is initialized and admin account(s) are 
 set up those options may be removed and used only in emergency case (i.e. when the last admin user remove itself).
 ** Location of the files with configuration of the e-mail subsystem and message templates.
 More information on this topic is included in the subsection <<notifications>>.
 ** Location of Public Key Infrastructure (PKI) configuration file. This is documented separately in the 
 subsection <<pki>>.
 ** Database configuration which is described in the section <<db-conf>>.
 ** Loaders of example contents, which are useful for a quick start.
 ** Configuration of enabled languages.
 ** Selection of the server main truststore and credential, mostly used for SSL. 
 * HTTP server settings, where there are three important settings: hostname and port where the server listens and
 the advertised address, which should be an address or IP via which the server should be reached from Internet. 
 The remaining options of the HTTP server are fairly advanced.
 * Definitions of various artifacts of the server to be loaded: credentials, credential requirements, authenticators, 
endpoints and translation profiles. Note that the credentials, credential requirements and translation profiles 
can be also managed more conveniently with the Web Admin UI.
The configuration of authenticators and endpoints is described in the subsection <<cfg-authenticators>>
and the translation profiles are covered in <<external-idps>>. 

The general options reference table follows:

include::ref-mainServerProperties.txt[]

[[db-conf]]
=== Database configuration

Unity uses two databases. The primary one is used to store the complete state of the system.
The second one, called as _local database_, is used to record a stream of events which happen in the system. 
The purpose of the separate databases is that the primary database can be replicated and/or shared
between multiple instances of Unity server, while the local database should not be replicated/shared.
Of course backups of both databases can and should be performed.

Note that the Admin UI provides a possibility to create a dump of the primary database and to restore 
the system from such dump.

The following table enumerates all options which are used to configure both databases. Only one option
pertains to the local database, the rest is for the primary one. This is because the local database is
always handled by the H2 database engine, so only the database storage location can be changed. 

include::ref-dbProperties.txt[]

==== MySQL setup

The setup of MySQL requires creation of a database with a separate user which is able to connect to the database.
In mysql console (when logged with admin privileges) execute:
 
 CREATE DATABASE unitydb;
 GRANT ALL PRIVILEGES ON unitydb.* to 'unity'@'localhost' IDENTIFIED BY 'unitypass';
 
using the desired database name, username and password. If the database is on a different host then the Unity instance,
change to localhost to a proper host of Unity installation or use +%+ to allow connections from any host.  

Test if the connection works with:

 mysql -p -u unity unitydb

and give the password.

Unity server will setup all tables automatically on startup.

To configure Unity to use the database change the database JDBC URI as well as add the username, password and dialect:
 
----
unityServer.db.jdbcUrl=jdbc:mysql://localhost/unitydb
unityServer.db.dialect=mysql
unityServer.db.password=unitypass
unityServer.db.username=unity
----

[[pki]]
=== PKI settings

Unity uses a centralized management of all Public Key Infrastructure (PKI) settings in a file defined in 
the main configuration. By default the configuration file is called +pki.properties+.

In the file three types of objects can be defined: PKI credentials (i.e. pairs consisting of an 
X.509 certificate and an associated private key), truststores (sets of trusted CA certificates with many additional 
settings as CRLs) and individual certificates of external entities.

It is possible to define many objects of each type. For instance one can define two credentials: one for 
SSL server and another one for the SAML IdP endpoint to sign issued SAML assertions.

All of the artifacts are named and the names are used in other parts of the Unity configuration to refer to 
a configure instance. The main configuration reference is presented below. The subsequent sections cover in more
details the configuration of truststores and credentials which can be configured in many different ways. 

include::ref-pkiProperties.txt[]


[[server_trust]]
==== PKI/X.509 trust settings

Public Key Infrastructure (PKI) trust settings are used to validate certificates, i.e. to check if the certificate
are not faked. This is performed, in the first place when a connection with a remote peer is initiated over 
the network, using the SSL (or TLS) protocol. Additionally certificate validation can happen in few other 
situations, e.g. when checking digital signatures of various sensitive pieces of data.

Certificates validation is primarily configured using a set of initially trusted certificates of so called 
Certificate Authorities (CAs). Those trusted certificates are also known as _trust anchors_ and their collection
is called a _trust store_.

Except of _trust anchors_ validation mechanism can use additional input for checking if a certificate being checked 
was not revoked and if its subject is in a permitted namespace.

Unity allows for different types of trust stores. All of them are configured using a set of properties.

 - _Keystore trust store_ - trusted certificates are
 stored in a single binary file in the JKS or PKCS12 format. The file can be manipulated using a special tool
 like JDK +keytool+ or +openssl+ (in case of PKCS12 format). This format is a good choice if the trust store 
 should be stored in a single file or when compatibility with other Java solutions is desired.   
 - _OpenSSL trust store_ - allows to use a directory with CA certificates stored in PEM format, under precisely
 defined names: the CA certificates, CRLs, signing policy files and namespaces files are named 
 +<hash>.0+, +<hash>.r0+, +<hash>.signing_policy+ and +<hash>.namespaces+. 
 The hash must be generated using the +openssl+ tool from a trusted certificate. 
 This format is used by many well known servers, Linux distributions often provide tools
 to help in trust store management. Therefore this format is suggested if reuse of the truststore is needed.
 - _Directory trust store_ - the most flexible and convenient option, suggested for all remaining cases. It allows
 administrators to use a list of wildcard expressions, concrete paths of files or even URLs to remote files 
 as a set of trusted CAs and corresponding CRLs. With this trust store it is trivial to configure a
 designated directory(-ies) as a trust store.
 
In all cases trust stores can be (and by default are) configured to be automatically refreshed. 
 
The following table provides a reference to settings of all of the trust stores. Note that the prefix of the
+pki.properties+ is not shown in the table.

include::sec-ref-trustProperties.txt[]

*Examples*

Directory trust store, with a minimal set of options:

 unity.pki.truststores.MAIN.type=directory
 unity.pki.truststores.MAIN.directoryLocations.1=/trust/dir/*.pem
 unity.pki.truststores.MAIN.crlLocations=/trust/dir/*.crl
 
Directory trust store, with a complete set of options:

 unity.pki.truststores.MAIN.type=directory
 unity.pki.truststores.MAIN.allowProxy=DENY
 unity.pki.truststores.MAIN.updateInterval=1234
 unity.pki.truststores.MAIN.directoryLocations.1=/trust/dir/*.pem
 unity.pki.truststores.MAIN.directoryLocations.2=http://caserver/ca.pem
 unity.pki.truststores.MAIN.directoryEncoding=PEM
 unity.pki.truststores.MAIN.directoryConnectionTimeout=100
 unity.pki.truststores.MAIN.directoryDiskCachePath=/tmp
 unity.pki.truststores.MAIN.crlLocations.1=/trust/dir/*.crl
 unity.pki.truststores.MAIN.crlLocations.2=http://caserver/crl.pem
 unity.pki.truststores.MAIN.crlUpdateInterval=400
 unity.pki.truststores.MAIN.crlMode=REQUIRE
 unity.pki.truststores.MAIN.crlConnectionTimeout=200
 unity.pki.truststores.MAIN.crlDiskCachePath=/tmp

Java keystore used as a trust store:

 unity.pki.truststores.MAIN.type=keystore
 unity.pki.truststores.MAIN.keystorePath=/trust/truststore.jks
 unity.pki.truststores.MAIN.keystoreFormat=JKS
 unity.pki.truststores.MAIN.keystorePassword=xxxxxx


[[server_cred]]
==== Configuring the PKI credential

Unity uses private key and a corresponding certificate (called together as a _credential_) 
to identify itself to its clients during TLS connection and sometimes to digitally sign returned documents. 
This allows clients to be sure that they are talking with the genuine, not faked peer. 
Note that also clients or users may use certificates to identify themselves to Unity - this is another topic.  

[NOTE]
Do not confuse the _PKI credential_ used by the server to identify itself with the credentials of the
entities handled in the Unity's database.

[NOTE]
For production usage, Unity should use a certificate issued by a globally trusted certificate authority.

Credentials might be provided in several formats:

 - Credential can be obtained from a _keystore file_, encoded in JKS or PKCS12 format.  
 - Credential can be loaded as a pair of PEM files (one with private key and another with certificate),
 - or from a pair of DER files,
 - or even from a single file, with PEM-encoded certificates and private key (in any order).  

The following table list all parameters which allows for configuring the credential.
Note that nearly all settings are optional. If not defined, the format is guessed.
However, some credential formats require additional settings. For instance, if using the _der_ format,
the _keyPath_ is mandatory as you need two DER files: one with a certificate and one with a key (and
the latter path can not be guessed). Note that the prefix of the +pki.properties+ configuration is not 
shown in the table.

include::sec-ref-credProperties.txt[]

*Examples*

Credential as a pair of DER files:

 unity.pki.credentials.MAIN.format=der
 unity.pki.credentials.MAIN.password=SOME PASS
 unity.pki.credentials.MAIN.path=/etc/credentials/cert-1.der
 unity.pki.credentials.MAIN.keyPath=/etc/credentials/pk-1.der

Credential as a JKS file (credential type can be autodetected in almost every case):

 unity.pki.credentials.MAIN.path=/etc/credentials/server1.jks
 unity.pki.credentials.MAIN.password=xxxxxx


[[cfg-authenticators]]
=== Authenticators

[NOTE]
Credential types and credential requirements can be configured in the Web Admin UI, so we skip 
a description of their configuration in the configuration files.


Authenticators and endpoints as of now can be configured only in the configuration file. Endpoints 
are covered in a separate section <<endpoints>>.

Authenticator is a pair of two configured elements: _credential verificator_ and _credential retrieval_.
The credential retrieval collects a credential in a binding specific way, for instance it may
gather it from a SOAP header (in case of the web service binding) or present a text field and 
allow a user to enter it (in case of the web binding). The verificator is not binding-specific and 
is only responsible for validation of a presented credential. For example the passowrd verificator
can be used with any retrieval which is collecting a password from a client.

Authenticators are added to endpoints and manage endpoint's authentication. The endpoint must have at least 
one authenticator associated (and can have more when alternative or multi-credential authentication 
scenarios are implemented). 

Example configuration:

-----
unityServer.core.authenticators.2.authenticatorName=pwdWeb
unityServer.core.authenticators.2.authenticatorType=password with web-password
unityServer.core.authenticators.2.localCredential=secured password
unityServer.core.authenticators.2.retrievalConfigurationFile=conf/passwordRetrieval-config.json
-----  

The name of the authenticator is an arbitrary, unique string. The type is the most important part:
it defines the name of the credential verificator and retrieval, both names must be separated with the string
+with+. The following table lists allowed credential verificators and retrievals. Any combination can be used,
assuming the same credential is exchanged.

[cols="m,n,n", options="header"]
|====
|Verificator		| Exchanges			| Description 
|password			| Password 			| Local verificator.
|ldap				| Password			| External verificator, uses LDAP.
|certificate		| X.509 certificate | Local verificator.
|saml2				| SAML assertions 	| External verificator, interacts via associated retrieval with a remote SAML IdP.
|==== 

[cols="m,n,n,n", options="header"]
|====
|Retrieval			| Exchanges			| Compatible binding 	| Description 
|web-password		| Password			| Web (Vaadin) 			| Uses textfield to collect a password
|web-certificate	| X.509 certificate	| Web (Vaadin) 			| Uses client-authenticated TLS/SSL certificate
|cxf-httpbasic		| Password			| Web Service (CXF stack)| Uses HTTP BASIC submitted password
|cxf-certificate	| X.509 certificate	| Web Service (CXF stack)| Uses client-authenticated TLS/SSL certificate
|web-saml2			| SAML assertions	| Web (Vaadin) 			| Allows to choose remote SAML IdP, redirects the user to authenticate there and collects the received authentication data.
|==== 

Examples of some of the allowed combinations:
 
 password with web-password
 password with cxf-httpbasic
 ldap with cxf-basic
 certificate with web-certificate
 certificate with cxf-certificate
 
But for instance the combination +ldap with web-saml2+ is illegal: ldap verificator uses different exchange 
(Password) then web-saml2. Note that this is logical: LDAP server can not be used to verify a SAML assertion obtained
from some remote SAML IdP.

Both credential verificator and credential retrieval can require a separate configuration in external files, 
in the example only the credential retrieval has it configured. Finally all local verificators must be
associated with the existing local credential (the _secured password_ in the example).

Configuration of external verificators is covered in the section <<external-idps>>. Configuration
of retrievals and local verificators is either not needed or trivial. 
Currently only the +web-password+ allows for it, offering two options:

----
{
	"name": "LDAP password",
	"registrationFormForUnknown": "ldapRegistration"
}	
----

Name is used in the web interface. The registration form parameter is used only for cases when the
retrieval is used with a remote authenticator: then the given registration form is presented
automatically to the users who properly authenticated against the upstream IdP but doesn't have 
a local account. 


=== HTTP server settings

The embedded HTTP server is using sensible default values of HTTP settings. There are only two properties which 
always needs to be properly set: hostname and port. However in some cases it may be necessary 
to fine tune also the advanced settings. The complete reference is included below:

include::ref-httpServerProperties.txt[]


[[notifications]]
=== Notifications and e-mail settings

Notifications and other messages are sent by Unity in several cases, for instance as an optional verification
step during password reset or to notify an administrator about a new registration request.

Currently the only notification channel available is the e-mail channel. It can be disabled 
by removing or commenting the e-mail configuration property in the main configuration file.
If enabled it is configured in a separate properties file. The default file provides a detailed information
on the available options so should be easy to edit.

The actual contents of the messages being sent is governed by the _message templates_. Message templates are
configured using Admin UI (Server management->Message templates). It is also possible to configure them with
configuration file (by default +msgTemplates.properties+), but this is much more difficult and not suggested.  
Currently a template is a named pair of two pieces of text: subject (title) and message body. What's more the template
can contain several variables which must be formated as:

----
${VARIABLE_NAME}   
----

Variables are replaced dynamically with concrete values when a message is prepared to be sent. Naturally
each subsystem sending messages provides different variables. Therefore each template must be associated with 
a concrete subsystem. This is performed in the template edit screen. The list of available variables for each 
subsystem is also provided there.  

=== Authentication realms and login sessions

Unity uses _authenticaiton realms_ to manage shared configuration of login sessions for endpoints. Each endpoint 
must be associated with exactly one authentication realm. 

In authentication realm configuration session expiration and blocking of brute force attacks are defined. It is also
possible to enable 'remember me' feature, which is rather insecure as the user must not use it from public computers: 

----
unityServer.core.realms.1.realmName=lowSecurityRealm
unityServer.core.realms.1.blockAfterUnsuccessfulLogins=10
unityServer.core.realms.1.blockFor=30
unityServer.core.realms.1.maxInactivity=3600
unityServer.core.realms.1.enableRememberMeFor=3
----

Association of an endpoint with authentication realm is given in the main endpoint's configuration in 
+unityServer.conf+:

----
unityServer.core.endpoints.N.endpointRealm=lowSecurityRealm
---- 

Please note that several properties of authentication realms are supported only on web endpoints, as for instance
web service (SOAP) endpoints do not use sessions. Still it is important to understand that even for those endpoints
the fact whether the endpoint is or is not in the same authentication realm as other endpoint can be significant.
The most important case is with all targeted tokens and identities which are generated by Unity. Let's consider
an example. 

Two SAML endpoints A (Web) and B (SOAP) are in the same authentication realm R1, while the third endpoint C (SOAP)
is in realm R2. If a service provider asks a client to to authenticate it via A endpoint and receives a transient 
(targeted) identity, this identity will be also valid for the queries to the endpoint B as both are in the same realm,
sharing the session context of the logged user. At the same time this transient identity won't be available at 
endpoint C. 


[id="logging"]
=== Logging configuration

Unity uses the Log4j logging framework in version 1.2.x (note that the latest version 2.x is much different).
What is more the log4j-extras package is included so additional logging features are enabled. 
Logging is configured in the +conf/log4j.properties+ file.


By default, log files are written to the the +logs/+ directory. 

The following example config file configures logging so that log files are 
rotated daily, and the old log files are compressed.

-------------------
# The default log level and the output (appender)
log4j.rootLogger=INFO, LOGFILE

# What to log
log4j.logger.net.sf.ehcache=WARN
log4j.logger.org.springframework=WARN
log4j.logger.org.eclipse.jetty=INFO
log4j.logger.unity.server=DEBUG
log4j.logger.unity.server.config=INFO
log4j.logger.org.apache=INFO
log4j.logger.pl.edu.icm=DEBUG
log4j.logger.pl.edu.icm.unity.db.mapper=INFO


#Configuration of appenders which performs actual logging

# LOGFILE is set to be a file appender using a PatternLayout with daily rolling.
log4j.appender.LOGFILE=org.apache.log4j.rolling.RollingFileAppender
log4j.appender.LOGFILE.RollingPolicy=org.apache.log4j.rolling.TimeBasedRollingPolicy
log4j.appender.LOGFILE.RollingPolicy.FileNamePattern=logs/unity-server.log.%d{yyyy-MM-dd}.gz
log4j.appender.LOGFILE.File=logs/unity-server.log
log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
log4j.appender.LOGFILE.layout.ConversionPattern=%d{ISO8601} [%t] %-5p %c %x - %m%n
-------------------

[NOTE]
===========
In Log4j, the log rotation frequency is controlled by the DatePattern. Check 
http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/DailyRollingFileAppender.html
for the details.
===========

For more info on controlling the logging we refer to the log4j documentation:
  
  - http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/PatternLayout.html[PatternLayout]
  
  - http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/RollingFileAppender.html[RollingFileAppender]
  
  - http://logging.apache.org/log4j/1.2/apidocs/org/apache/log4j/DailyRollingFileAppender.html[DailyRollingFileAppender]
  
 
Log4j supports a very wide range of logging options, such as date based or size based file rollover,
logging different things to different files and much more. For full information on Log4j we refer to
the publicly available documentation, for example the 
http://logging.apache.org/log4j/1.2/manual.html[Log4j manual].
 

==== Logger categories, names and levels

Logger names are hierarchical. In Unity, prefixes are used (e.g. "unity.server.con") 
to which the Java class name is appended. The most common logging prefixes are:

- +unity.server+ - general server messages
- +unity.server.config+ - configuration parsing and loading
- +unity.server.db+ - database related
- +unity.server.web+ - web interface related
- +unity.server.saml+ - SAML subsystem related
- +unity.server.ldap+ - upstream LDAP IdP related 
- +unity.server.ws+ - SOAP (web service) stack related
- +unity.server.externaltranslation+ - messages connected with the translation of any upstream IdP 
data to the Unity format.
 

Therefore the logging output produced can be controlled in a fine-grained manner. 
Log levels in Log4j are (in increasing level of severity): 

- +TRACE+ on this level _huge_ pieces of unprocessed information are dumped,
- +DEBUG+ admin-friendly, verbose information, useful for hunting problems, 
- +INFO+ standard information, not much output,
- +WARN+ warnings are logged when something went wrong (so it should be investigated), but recovery was possible,
- +ERROR+ something went wrong and operation probably failed, 
- +FATAL+ something went really wrong - this is used very rarely for critical situations like overall server failure.

For example, to debug a configuration problem, you can set:
  
------
log4j.logger.unity.server.config=DEBUG
------

[NOTE]
===========
The best way to discover what is the name of the interesting category is to turn on the general DEBUG logging 
for a while. Then interesting events can be seen and subsequently the logging configuration can be fine tuned
to only show them.
===========

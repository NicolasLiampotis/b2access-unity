[[contents-management]]
== Contents management

The Web Admin UI allows to manage the schema and contents of the server.
The initial admin user and its password is defined in the configuration file. 
The actual address is defined there as well, if unchanged it is https://localhost:2443/admin/admin.
After the first login it is required to change the initial password.  
 

The most important features of the Web Admin UI are:

* Management of attribute types, attribute classes,
  credential types and credential requirements (_Schema management tab_).
* Possibility to manage groups, their attribute classes and attribute statements (_Contents management tab_).
* Control over entities and identities and their group membership (_Contents management tab_).
* Full attribute control (_Contents management tab_).
* Management of registration forms, possibility to fill them instantly from the Web Admin UI and to manage
the received requests (_Registrations management tab_).
* Possibility to create and load database dumps and to browse and trigger reconfiguration of 
endpoints, authenticators and translation profiles (_Server management tab_).

We hope that the UI is easy to use, therefore we limit the description to the following 
screenshot with some hints. In case of troubles please let us know through the mailing list, 
we will provide more details.

image::./figures/contentsMan-comments.png[alt="Unity Web Admin UI",align="center",scaledwidth="50%"]


=== Registration forms

Unity allows its administrators to define and deploy so called _registration forms_. A registration
form can be used in three cases:

. To collect registration information from prospective users. This can be seen as a classic
registration feature use case.
. To quickly and conveniently create entities with common characteristics. In this case
administrator can define what data needs to be entered for the created user and also automate 
some of the actions which should be performed for newly added users.
. To collect additional information from users who are authenticated by a remote IdP, so the user can be 
added to the local database.

The first step is to define a registration form. The form definition consists of three parts:

. General settings as name, notifications configuration and decision whether the form is publicly available.
. Collected information settings, which define what needs to be provided to the form. This information
is usually collected interactively by filling a web form, but some data can be also collected from a
remote IdP. This latter option is possible only if a form is used for unknown remote users.
. Settings which are automatically assigned for each user whose registration request is accepted.
For instance this feature may be used to add all users to a specified group.    

After creation a registration form can be tested and also filled (use case no 2 above) directly from 
the Admin Web UI. If the form is public it can be associated with any endpoint with the Web (Vaadin) binding.
Then a link to register a new account will appear on the login screen of the endpoint. Finally 
a form can be associated with a remote authenticator as a "handler" for unknown users who were 
correctly authenticated remotely.

An example of registration form creation:

image::./figures/regFormMan.png[alt="Definition of registration form in Unity",align="center",scaledwidth="50%"]

A simple registration form in action:

image::./figures/regFormFill1.png[alt="Filling of a registration form in Unity",align="center",scaledwidth="50%"]

Note that the above screenshot is showing the form as activated from the Web Admin UI; the form 
launched other way will not allow for automatic acceptance.

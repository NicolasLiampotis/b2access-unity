[[contents-management]]
== Contents management

The Web Admin UI allows to manage the schema and contents of the server.
The initial admin user and its password is defined in the configuration file. 
The actual address is defined there as well, if unchanged it is https://localhost:2443/admin/admin.
After the first login it is required to change the initial password.  
 

The most important features of the Web Admin UI are:

* Management of attribute types, attribute classes,
  credential types and credential requirements (_Schema management tab_).
* Possibility to manage groups, their attribute classes and attribute statements (_Contents management tab_).
* Control over entities and identities and their group membership (_Contents management tab_).
* Full attribute control (_Contents management tab_).
* Management of registration forms, possibility to fill them instantly from the Web Admin UI and to manage
the received requests (_Registrations management tab_).
* Possibility to create and load database dumps and to browse and trigger reconfiguration of 
endpoints, authenticators and translation profiles (_Server management tab_).

We hope that the UI is easy to use, therefore we limit the description to the following 
screenshot with some hints. In case of troubles please let us know through the mailing list, 
we will provide more details.

image::./figures/contentsMan-comments.png[alt="Unity Web Admin UI",align="center",scaledwidth="50%"]

=== Authorization

Unity offers a simple but quite powerful authorization control of its own access. It is controlled by a designated
attribute: +sys:AuthorizationRole+. The attribute is of enumeration type, and the type can not be changed.

By assigning this attribute to entities, those entities are granted some roles and therefore are authorized to perform 
certain operations in Unity. The detailed information on what is allowed for each role holder is provided 
in attribute type description (see Schema Management->Attribute Types). The two most important roles are:

 . +System manager+ who is authorized to perform all actions and
 . +Regular user+ who can perform all the typical operations reserved for users, i.e. read information about itself.

[NOTE]
===========
It is possible to create an entity without assigning any authorization role. Such entity will be present in the system,
but won't be able to perform besides authentication. It won't be even allowed to read its own attributes.
===========

[NOTE]
===========
A good approach is to define an attribute statement assigning a default authorization role (e.g. +Regular User+
or +Anonymous User+) to all members of the '/' group.
===========

The +sys:AuthorizationRole+ is typically assigned in the root ('/') group. However, Unity also supports
authorization on the group level: all Unity operations which operate on a particular group (e.g. read attributes in 
a group, add a member to a group, read group members, create a subgroup, etc) are using the +sys:AuthorizationRole+
attribute which is defined for the user performing the operation in the group in question or in the closest parent 
where it is defined. Example:

====
User _Joe_ is a member of +/Faculty/Staff+ group (therefore it is also a member of +/Faculty+) and no other groups. 
He has the +sys:AuthorizationRole=System Manager+ attribute defined in the +/Faculty/Staff+ group. What's more he has 
+sys:AuthorizationRole=Anonymous User+ defined in '/' group and  +sys:AuthorizationRole=Regular User+ attribute
in the +/Faculty+ group.

_Joe_ tries to add an attribute to an entity representing _Ann_, in the group +/Faculty/Students+. As he is not a member
of this group he has no authorization role defined there. The next group to check is +/Faculty+, 
where he has the authorization role defined (+Regular User+). The role doesn't allow for managing attributes 
so the operation will fail. However _Joe_ can modify attributes of any entity in the  +/Faculty/Staff+ 
group as he has +System Manager+ role there.
====  
 

=== Registration forms

Unity allows its administrators to define and deploy so called _registration forms_. A registration
form can be used in three cases:

. To collect registration information from prospective users. This can be seen as a classic
registration feature use case.
. To quickly and conveniently create entities with common characteristics. In this case
administrator can define what data needs to be entered for the created user and also automate 
some of the actions which should be performed for newly added users.
. To collect additional information from users who are authenticated by a remote IdP, so the user can be 
added to the local database.

The first step is to define a registration form. The form definition consists of three parts:

. General settings as name, notifications configuration, auto accept condition and decision whether the form is publicly available.
. Collected information settings, which define what needs to be provided to the form. This information
is usually collected interactively by filling a web form, but some data can be also collected from a
remote IdP. This latter option is possible only if a form is used for unknown remote users.
. Settings which are automatically assigned for each user whose registration request is accepted.
For instance this feature may be used to add all users to a specified group.    

Registration request can be automatically accepted after submit if meets the auto accept condition defined 
in associated registration form. The auto accept condition is given as a MVEL expression, which must evaluate to 
a boolean value (true or false).
See <<mvel>> for details and examples.
Condition can operate on a data structure filled during creating registration request which contain:

. Identity (or identities) 
. Attributes
. Groups
. Agreements

Example of auto accept conditions:

Accept request with mail attribute.
------
attrs["email"][0] == "foo@a.b"
------
Accept request with identity.
------
ids["CN=registration test2"] != null
------
Accept request with selected first agreement.
------
agrs[0] == true
------

After creation a registration form can be tested and also filled (use case no 2 above) directly from 
the Admin Web UI. If the form is public it can be associated with any endpoint with the Web (Vaadin) binding.
Then a link to register a new account will appear on the login screen of the endpoint. Finally 
a form can be associated with a remote authenticator as a "handler" for unknown users who were 
correctly authenticated remotely.

An example of registration form creation:

image::./figures/regFormMan.png[alt="Definition of registration form in Unity",align="center",scaledwidth="50%"]

A simple registration form in action:

image::./figures/regFormFill1.png[alt="Filling of a registration form in Unity",align="center",scaledwidth="50%"]

Note that the above screenshot is showing the form as activated from the Web Admin UI; the form 
launched other way will not allow for automatic acceptance.

[[contents-management]]
== Contents management

The Web Admin UI allows to manage the schema and contents of the server.
The initial admin user and its password is defined in the configuration file. 
The actual address is defined there as well, if unchanged it is https://localhost:2443/admin/admin.
After the first login it is required to change the initial password.  
 

The most important features of the Web Admin UI are:

* Management of attribute types, attribute classes,
  credential types and credential requirements (_Schema management tab_).
* Possibility to manage groups, their attribute classes and attribute statements (_Contents management tab_).
* Control over entities and identities and their group membership (_Contents management tab_).
* Full attribute control (_Contents management tab_).
* Management of registration forms, possibility to fill them instantly from the Web Admin UI and to manage
the received requests (_Registrations management tab_).
* Possibility to create and load database dumps and to browse and trigger reconfiguration of 
endpoints, authenticators and translation profiles (_Server management tab_).

We hope that the UI is easy to use, therefore we limit the description to the following 
screenshot with some hints. In case of troubles please let us know through the mailing list, 
we will provide more details.

image::./figures/contentsMan-comments.png[alt="Unity Web Admin UI",align="center",scaledwidth="50%"]

=== Authorization

Unity offers a simple but quite powerful authorization control of its own access. It is controlled by a designated
attribute: +sys:AuthorizationRole+. The attribute is of enumeration type, and the type can not be changed.

By assigning this attribute to entities, those entities are granted some roles and therefore are authorized to perform 
certain operations in Unity. The detailed information on what is allowed for each role holder is provided 
in attribute type description (see Schema Management->Attribute Types). The two most important roles are:

 . +System manager+ who is authorized to perform all actions and
 . +Regular user+ who can perform all the typical operations reserved for users, i.e. read information about itself.

[NOTE]
===========
It is possible to create an entity without assigning any authorization role. Such entity will be present in the system,
but won't be able to perform besides authentication. It won't be even allowed to read its own attributes.
===========

[NOTE]
===========
A good approach is to define an attribute statement assigning a default authorization role (e.g. +Regular User+
or +Anonymous User+) to all members of the '/' group.
===========

The +sys:AuthorizationRole+ is typically assigned in the root ('/') group. However, Unity also supports
authorization on the group level: all Unity operations which operate on a particular group (e.g. read attributes in 
a group, add a member to a group, read group members, create a subgroup, etc) are using the +sys:AuthorizationRole+
attribute which is defined for the user performing the operation in the group in question or in the closest parent 
where it is defined. Example:

====
User _Joe_ is a member of +/Faculty/Staff+ group (therefore it is also a member of +/Faculty+) and no other groups. 
He has the +sys:AuthorizationRole=System Manager+ attribute defined in the +/Faculty/Staff+ group. What's more he has 
+sys:AuthorizationRole=Anonymous User+ defined in '/' group and  +sys:AuthorizationRole=Regular User+ attribute
in the +/Faculty+ group.

_Joe_ tries to add an attribute to an entity representing _Ann_, in the group +/Faculty/Students+. As he is not a member
of this group he has no authorization role defined there. The next group to check is +/Faculty+, 
where he has the authorization role defined (+Regular User+). The role doesn't allow for managing attributes 
so the operation will fail. However _Joe_ can modify attributes of any entity in the  +/Faculty/Staff+ 
group as he has +System Manager+ role there.
====  
 

=== Registration forms

Unity allows its administrators to define and deploy so called _registration forms_. A registration
form can be used in three cases:

. To collect registration information from prospective users. This can be seen as a classic
registration feature use case. Such forms are called as 'public'.
. To quickly and conveniently create entities with common characteristics. In this case
administrator can define what data needs to be entered for the created user and also automate 
some of the actions which should be performed for newly added users.
. To collect additional information from users who are authenticated by a remote IdP, so the user can be 
added to the local database.   

After creation a registration form can be tested and also filled (use case no 2 above) directly from 
the Admin Web UI. If the form is public it can be associated with any endpoint with the Web (Vaadin) binding.
Then a link to register a new account will appear on the login screen of the endpoint. Finally 
a form can be associated with a remote authenticator as a "handler" for unknown users who were 
correctly authenticated remotely. For this last case typically the form should not be public. It is also
crucial to configure the input translation profile of the authenticator so it _does not_ create local user 
automatically. Otherwise the configured form won't be launched as the local user will be always present 
after translation profile execution. 

An example of registration form creation:

image::./figures/regFormMan.png[alt="Definition of registration form in Unity",align="center",scaledwidth="50%"]

A simple registration form in action:

image::./figures/regFormFill1.png[alt="Filling of a registration form in Unity",align="center",scaledwidth="50%"]

Note that the above screenshot is showing the form as activated from the Web Admin UI; the form 
launched other way will not allow for automatic acceptance.


==== Defining a registration form

The form definition consists of three parts:

. General settings as name, notifications configuration, auto accept condition and 
decision whether the form is publicly available.
. Collected information settings, which define what needs to be provided to the form. This information
is usually collected interactively by filling a web form, but some data can be also collected from a
remote IdP. This latter option is possible only if a form is used for unknown remote users.
. Settings which are automatically assigned for each user whose registration request is accepted.
For instance this feature may be used to add all users to a specified group.    

The most important are the settings of the 2nd point, i.e. the data collected about the user. Each
of the identities, group memberships and attributes can be collected in different modes. Some of the modes
are only relevant for a case when a registration form is presented to an unknown user who 
was authenticated by a remote IdP. The modes are as follows:

Collected interactively:: A user interface component is displayed to collect the information from a user.
Provided by remote IdP only and is shown in the form:: The information must be provided by a remote IdP.
It is then shown to a user in the form, but can not be edited.
Provided by remote IdP only and is hidden in the form:: As above but the information is 
not shown on the form filling screen. 
Can be provided by remote IdP; if not then collected interactively:: In this mode the user can fill the data 
only if it was not provided by a remote IdP.
Can be provided by remote IdP and is editable:: The field is always editable, but if a remote IdP provided a value 
then it is used as a default.

Additionally all pieces of collected information can be made optional. The other types of collected information:
agreements and credentials can be only collected interactively, therefore there is no mode selection in their case. 

==== Automatic request acceptance

Registration request can be automatically accepted after submission, if it meets the 
'Auto accept' condition defined in the associated registration form. The 'Auto accept' condition is given 
as an MVEL expression, which must evaluate to a boolean value (+true+ or +false+).
Condition operates on a data structure filled during registration request creation, which contains:

. +attr+ Map indexed with attribute names. Value of each entry is a single value of the attribute. If the attribute
is multi-valued then the first value is returned. If the attribute has no value then empty string is returned. 
. +attrs+ Map indexed with attribute names. Value of each entry is a list of the attribute values.
. +idsByType+ Map of identity values indexed by type.
. +groups+ List of selected groups. 
. +agrs+ List of agreements. Each agreement is boolean type.

The full MVEL documentation can be found here 
http://mvel.codehaus.org/Language+Guide+for+2.0 and the quick start is here
http://mvel.codehaus.org/Getting+Started+for+2.0


Example of auto accept conditions:

Accept request with +email+ attribute.
------
attrs["email"][0] == "foo@a.b"
------
Accept request if contain identity of x500Name type.
------
idsByType["x500Name"] != null
------
Accept a request only if the first agreement was accepted. 
------
agrs[0] == true
------

=== Identities and entities

Unity represents principals as _entities_. Entity is a logical element symbolizing, the principal. Each entity
must have at least one concrete representation which is called _identity_. 

Identities in Unity have its type, which defines the syntax, comparison rules etc. of the value. 

Regular identities can be created manually by administrators, imported from external IdPs with a help of 
input translation profile or added in effect of registration request acceptance. There is also a special category
of identities: dynamic or automatic identities. Those identities are special in this sense that their values
are assigned by Unity itself - administrator is able to only see their values and optionally can remove the values.

The following table describes all available identity types:

[cols="m,n,n" options="header"]
|=== 
|UNITY identity type	| Category	| Description  
|userName				| regular	| User name, compared with simple string equality. This type of identity can be used for all password-alike authentications in Unity. 
|identifier				| regular	| Generic identifier, compared with string equality. It is useful to represent remotely assigned user identifiers and to match against them during subsequent authentications. It is not possible to directly login with this identity type. 
|x500Name				| regular	| X.500 name or a Distinguished Name (DN). Used in case of TLS/SSL authentication. The equality is tested on canonical form of DN.
|email					| regular	| Email address identity, compared with simple string equality. This type of identity can be used for all password-alike authentications in Unity. The value of this identity is subject of confirmation process.
|persistent				| automatic	| An automatically assigned anonymous identifier. Should be constant for each entity for its lifetime (and is unless manually removed).
|targetedPersistent		| automatic	| An automatically assigned anonymous identifier. It is different from the persistent type as for each of Unity clients (targets) a different identifier is maintained. 
|transient				| automatic	| An automatically assigned anonymous identifier. It is very similar to targetedPersistent, the only difference is that the identifier is regenerated for each login session. 
|===
 

=== E-mail confirmations

Unity provides a powerful support for verifications of e-mail addresses. Both e-mail identities and e-mail attributes
can be verified. In case of e-mail attribute each value is confirmed separately.  

As this functionality touches many different areas of Unity functionality we group all
the related information here.

==== Confirmations setup

To enable confirmations the following basic elements needs to be configured:

. The E-mail notification channel must be configured.
. There must be a message template (or templates) suitable for use with confirmation facility. See <<notifications>>.
. To confirm attributes at least one attribute type must be defined which will use the +verifiableEmail+ syntax. 
What's more each such attribute type must have confirmations enabled and configured by selecting a proper 
message template (see below).
. To confirm email identities, identity confirmations must be enabled and configured by selecting a proper 
message template (see below).

The configuration of confirmations (for identities and for each email attribute type) is performed in the 
Server management -> Confirmations configuration tab of the Admin UI. It is rather simplistic as the only 
really variable property is the template to be used.

Note that Unity contains a convenient content initializer which can be enabled in the +unityServer.conf+ to load 
default confirmation configurations on startup:

----
unityServer.core.initializers.3=confirmationsInitializer
----

Later in this section we assume that the confirmations were set up as was described above.

==== When confirmations are sent?

Whenever an email attribute or identity is created or changed manually in Unity interface 
the confirmation message is sent. The sole exception is a change of an attribute by administrator via the Admin UI: 
it is possible to control whether the attribute value should be added as confirmed or not.

Confirmations are also sent whenever a registration request is submitted, with an e-mail attribute or identity which
was collected from the user filling the form. The attributes and identities collected from remote IdPs can be assumed  
be verified (depending on the input translation profile, see below).

The confirmations are not sent when an attribute is updated and some of the values are preserved.
Also already sent confirmations are not repeated during attribute update. E.g. if there is an attribute with 
two email values +a@example.com+ (confirmed) and +b@example.com+ (unconfirmed, with confirmation request already sent),
and a user changes the attribute by adding a new attribute +c@example.com+ only one confirmation request will be sent
(for +c@example.com+), and the confirmed status of +a@example.com+ will be preserved.

Unity also takes care not to resent a confirmation if the same e-mail address was used for both 
identity and attribute (or multiple attributes). Then only a single confirmation is sent and is used to 
confirm all elements. 

It is also possible to reset a confirmation state by the administrator (from Admin UI) 
by setting the unconfirmed state of an attribute value.  

==== Registration forms and confirmations

Registration form including e-mail identities and/or attributes will have the confirmations automatically sent on 
submit. If the request is accepted before the user confirms its e-mail(s) then the confirmations are applied to 
e-mail/attribute of the already created entity. Otherwise are only recorded in the request. Administrator
can always check confirmation status on the request review panel.

It is also possible to use email or identity confirmation status as auto accept condition. This means that the 
auto-accept condition is evaluated not only after request submission, but also after the request is updated 
in confirmation effect. The auto acceptance rules for email attribute and identity (respectively) are as follows:

----
attr["email"].confirmed == true
----

----
idsByTypeObj["email"][0].confirmed == true
----

==== Input translation profile and confirmations

To control an attribute or identity confirmation state in a translation profile, the regular e-mail value must 
be followed with the special suffix +[CONFIRMED]+ or +[UNCONFIRMED]+ (case sensitive, without spaces between
the last character of email address). The default value is unconfirmed.

For instance assuming that the remote IdP provided an attribute +emailAddress+ and we assume that this address
should be treated as already confirmed the following expression will produce a proper value for the +mapAttribute+
action:

----
attr["emailAddress"] + "[CONFIRMED]"
----


==== User control of e-mail address

If the email attribute type is set as self modifiable, the user can edit its value on its own. To enable it
also the Home UI must be configured to allow for this.

There is one special rule regarding edit of the  e-mail attribute by an ordinary user: if the attribute has 
at least one confirmed value, then after changing the values also at least one confirmed value must be present.

Currently this rule is hardcoded, but in future we may enable its configuration in attribute type.
   
==== Authentication with e-mail identity

Authentication with e-mail identity can be used in the very same way as authentication with a plain username identity.
Both identity types works out of the box with the password credential.

The only difference is that a user can not authenticate with e-mail identity if it was not confirmed.
 

=== Internationalization & UI translations

Unity offers internationalization (i18) features out of the box. However the list of available languages
is hardcoded and currently includes only English (en), Polish (pl) and German (de) locales. English locale is
the default one and all default messages are in this language. The Polish translation is mostly complete with the
exception of the Admin UI. German is currently empty. Administrator can configure which of the supported locale are
enabled (see +unityServer.conf+ documentation).

If you would like to have other locale supported please contact us via the mailing list - there is no problem to add 
them.  

What is more Unity allows you to provide all names which are configurable by administrator in multiple languages.
The user interface shows a small flag on right-top edge of each translatable component. After expanding the component,
the translations in all enabled languages can be provided.

image::./figures/languages.png[alt="Unity allows for translating admin-provided names",align="center"]


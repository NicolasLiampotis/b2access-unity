== Update

This section covers a general update procedure. Make sure to read version specific update instruction too: 
<<ver-update>>. If you are updating with a revision release (change of the version number after the last dot only, 
e.g. 1.3.0 -> 1.3.1 or 9.11.2 -> 9.11.5) you can skip to the simplified <<revision-update>> instruction.

The update is a potentially dangerous operation, therefore we suggest to take two precautions:

. *MANDATORY* make a full database backup _before_ starting the update.
. *SUGGESTED* make a test drive. To do this you need a separate instance of Unity service, with database copied from 
the production one. Update it first and only if everything goes OK, proceed with an update of the production instance.

After the precautions are done the update instructions are following.

When using the +.tar.gz+: 

. Install the updated version in a separate directory as in the case of a fresh installation.
. Configure it with the settings of the running instance. Copy the config files of the old version and 
(if required) made any version specific modifications which are given below. 
. Stop the old service.
. Start the new instance.
. Carefully check log files for any errors or warnings.
. If needed reconfigure startup scripts to start the updated service, as well as update the +PATH+ variable to use
new Unity binaries location. It is a good practice to have a symbolic link to the actual Unity installation directory
that is used in the +PATH+ and startup scripts. Then it is possible to simply change its target to the updated 
service directory.

If using the RPM: 

. Stop the old service.
. Update the RPM using platform tools (usually +yum+).
. Check if any configuration files needs to be updated (see below, also search for +.rpmnew+ files in /etc/unity-idm).
. Start the new service.
. Carefully check log files for any errors or warnings.

[NOTE] 
The database dump can be created and loaded from the Web Admin UI, from the _Server maintenance_ tab. It can be used 
to transfer the Unity state between instances, can be also used as a backup tool. However in the upgrade case
it is strongly suggested to make a regular database dump.

[[revision-update]]
=== Revision (bugfix) update

From time to time a revision version of Unity is released. Such version is marked with a change of the last 
number in the distribution version only. When installing such revision release a simplified procedure can be
taken. Database backup is advised as always, though in revision update the risk is minimal - revision releases
typically do not introduce database changes.
  
When using the +.tar.gz+: 

. Unpack the updated release
. Stop the server
. Replace the contents of the server's +lib/+ directory with the contents of the +lib/+ directory of the updated package.
. Start the server

When using RPM distribution it is enough to update the package with your package manager and restart the server. 

[[ver-update]]
=== Version specific update instructions

[NOTE]
The last component in the version string is irrelevant for the following instructions. For instance instructions
for the 1.2.0->1.3.0 applies also to 1.2.0->1.3.1 and all other 1.3.x versions.

==== From pre-1.2.0 version

You should follow instructions and upgrade version by version. The update instructions are always available
in the documentation of the version to which you are upgrading.

==== From 1.2.0 to 1.3.x

The version 1.3.0 introduces automatic update database tooling. Be sure to make a backup before an update. 
In case of production environments be sure to perform a test drive on a production database copy.

During update to 1.3.0 the translation profiles will be updated to the new model. Be sure to carefully check 
the results manually and to test if the profiles still work correctly. In case of any problems please let us know
providing the profile's update log entries.   

The version 1.3.0 introduces _output translation profiles_. Two of the features previously available in the 
configuration of SAML IdP endpoints are now handled by the translation profile in a more flexible and generic way: 
attribute filters and control of a dynamic attribute storing group membership information. If you relayed on 
default settings for those features (i.e. no filtering and 'memberOf' membership attribute) then it is only required
to remove the legacy properties from endpoint configuration files: +filter*+, +groupAttribute+ and +groupSelection+.
If the defaults were not used, the properties should be removed too, a custom output translation profile created
with rules filtering and or settings proper membership attribute, and finally the new profile must be assigned to the 
affected endpoint.    

If you still use the feature to load translation profiles from JSON files, please remove the definitions 
from configuration in +unityServer.conf+ or manually update the JSON definitions. 
Note that the profiles are anyway stored in the database after initial loading at server startup and will be updated
there. The JSON files won't be updated automatically. 
Note also that this format is undocumented and this feature is going to be deprecated soon.

==== From 1.3.x to 1.4.0

There were no incompatible database or configuration changes. However to enable some of the 
new features (as Single Logout on SAML authenticator) additional configuration settings must be added according to 
documentation. 

It can be noted that the maximum memory limit previously set to 256MB in +startup.properties+ should be increased to 
+512MB+.
 
  